// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parser getSectionInfo with params 1`] = `
{
  "methods": [
    {
      "description": "
Lists the projects accessible by the caller. This is the same as
using the ls-projects command over SSH,
and accepts the same options as query parameters.

As result a map is returned that maps the project names to
ProjectInfo entries. The entries in the map are sorted
by project name.
",
      "inputs": {
        "args": [],
        "body": undefined,
        "params": [
          [
            "branch",
            "b",
          ],
          [
            "description",
            "d",
          ],
          [
            "limit",
            "n",
          ],
          [
            "prefix",
            "p",
          ],
          [
            "regex",
            "r",
          ],
          [
            "skip",
            "S",
          ],
          [
            "substring",
            "m",
          ],
          [
            "tree",
            "t",
          ],
          [
            "type",
            "type",
          ],
          [
            "state",
            "s",
          ],
        ],
      },
      "method": "GET",
      "methodName": "listProjects",
      "originalName": "List Projects",
      "path": "/projects/",
      "returnType": {
        "type": "ProjectInfo",
        "wrapper": "map",
      },
    },
    {
      "description": "
Queries projects visible to the caller. The
query string must be
provided by the query parameter. The start and limit parameters
can be used to skip/limit results.

As result a list of ProjectInfo entities is returned.
",
      "inputs": {
        "args": [],
        "body": undefined,
        "params": [],
      },
      "method": "GET",
      "methodName": "queryProjects",
      "originalName": "Query Projects",
      "path": "/projects/",
      "returnType": {
        "type": "ProjectInfo",
        "wrapper": "list",
      },
    },
    {
      "description": "
Retrieves a project.

As response a ProjectInfo entity is returned that
describes the project.
",
      "inputs": {
        "args": [
          "projectName",
        ],
        "body": undefined,
        "params": [],
      },
      "method": "GET",
      "methodName": "getProject",
      "originalName": "Get Project",
      "path": "/projects/\${projectName}",
      "returnType": {
        "type": "ProjectInfo",
        "wrapper": undefined,
      },
    },
    {
      "description": "
Creates a new project.

In the request body additional data for the project can be provided as
ProjectInput.

As response the ProjectInfo entity is returned that
describes the created project.
",
      "inputs": {
        "args": [
          "projectName",
        ],
        "body": undefined,
        "params": [],
      },
      "method": "PUT",
      "methodName": "createProject",
      "originalName": "Create Project",
      "path": "/projects/\${projectName}",
      "returnType": {
        "type": "ProjectInfo",
        "wrapper": undefined,
      },
    },
    {
      "description": "
Retrieves the description of a project.

If the project does not have a description an empty string is returned.
",
      "inputs": {
        "args": [
          "projectName",
        ],
        "body": undefined,
        "params": [],
      },
      "method": "GET",
      "methodName": "getProjectDescription",
      "originalName": "Get Project Description",
      "path": "/projects/\${projectName}/description",
      "returnType": {
        "type": "any",
      },
    },
    {
      "description": "
Sets the description of a project.

The new project description must be provided in the request body inside
a ProjectDescriptionInput entity.

As response the new project description is returned.

If the description was deleted the response is “204 No Content”.
",
      "inputs": {
        "args": [
          "projectName",
        ],
        "body": {
          "type": "ProjectDescriptionInput",
          "wrapper": undefined,
        },
        "params": [],
      },
      "method": "PUT",
      "methodName": "setProjectDescription",
      "originalName": "Set Project Description",
      "path": "/projects/\${projectName}/description",
      "returnType": {
        "type": "any",
      },
    },
    {
      "description": "
Deletes the description of a project.

A commit message can be provided in the request body as a
ProjectDescriptionInput entity.
Historically, this method allowed a body in the DELETE, but that behavior is
deprecated.
In this case, use PUT instead.
",
      "inputs": {
        "args": [
          "projectName",
        ],
        "body": {
          "type": "ProjectDescriptionInput",
          "wrapper": undefined,
        },
        "params": [],
      },
      "method": "DELETE",
      "methodName": "deleteProjectDescription",
      "originalName": "Delete Project Description",
      "path": "/projects/\${projectName}/description",
      "returnType": {
        "type": "any",
      },
    },
    {
      "description": "
Retrieves the name of a project’s parent project. For the
All-Projects root project an empty string is returned.
",
      "inputs": {
        "args": [
          "projectName",
        ],
        "body": undefined,
        "params": [],
      },
      "method": "GET",
      "methodName": "getProjectParent",
      "originalName": "Get Project Parent",
      "path": "/projects/\${projectName}/parent",
      "returnType": {
        "type": "any",
      },
    },
    {
      "description": "
Sets the parent project for a project.

The new name of the parent project must be provided in the request body
inside a ProjectParentInput entity.

As response the new parent project name is returned.
",
      "inputs": {
        "args": [
          "projectName",
        ],
        "body": {
          "type": "ProjectParentInput",
          "wrapper": undefined,
        },
        "params": [],
      },
      "method": "PUT",
      "methodName": "setProjectParent",
      "originalName": "Set Project Parent",
      "path": "/projects/\${projectName}/parent",
      "returnType": {
        "type": "any",
      },
    },
    {
      "description": "
Retrieves for a project the name of the branch to which HEAD points.
",
      "inputs": {
        "args": [
          "projectName",
        ],
        "body": undefined,
        "params": [],
      },
      "method": "GET",
      "methodName": "getHEAD",
      "originalName": "Get HEAD",
      "path": "/projects/\${projectName}/HEAD",
      "returnType": {
        "type": "any",
      },
    },
    {
      "description": "
Sets HEAD for a project.

The new ref to which HEAD should point must be provided in the
request body inside a HeadInput entity.

As response the new ref to which HEAD points is returned.
",
      "inputs": {
        "args": [
          "projectName",
        ],
        "body": {
          "type": "HeadInput",
          "wrapper": undefined,
        },
        "params": [],
      },
      "method": "PUT",
      "methodName": "setHEAD",
      "originalName": "Set HEAD",
      "path": "/projects/\${projectName}/HEAD",
      "returnType": {
        "type": "any",
      },
    },
    {
      "description": "
Return statistics for the repository of a project.

The repository statistics are returned as a
RepositoryStatisticsInfo entity.
",
      "inputs": {
        "args": [
          "projectName",
        ],
        "body": undefined,
        "params": [],
      },
      "method": "GET",
      "methodName": "getRepositoryStatistics",
      "originalName": "Get Repository Statistics",
      "path": "/projects/\${projectName}/statistics.git",
      "returnType": {
        "type": "RepositoryStatisticsInfo",
        "wrapper": undefined,
      },
    },
    {
      "description": "
Gets some configuration information about a project. Note that this
config info is not simply the contents of project.config; it generally
contains fields that may have been inherited from parent projects.

A ConfigInfo entity is returned that describes the
project configuration. Some fields are only visible to users that have
read access to refs/meta/config.
",
      "inputs": {
        "args": [
          "projectName",
        ],
        "body": undefined,
        "params": [],
      },
      "method": "GET",
      "methodName": "getConfig",
      "originalName": "Get Config",
      "path": "/projects/\${projectName}/config",
      "returnType": {
        "type": "ConfigInfo",
        "wrapper": undefined,
      },
    },
    {
      "description": "
Sets the configuration of a project.

The new configuration must be provided in the request body as a
ConfigInput entity.

As response the new configuration is returned as a 
ConfigInfo entity.
",
      "inputs": {
        "args": [
          "projectName",
        ],
        "body": {
          "type": "ConfigInput",
          "wrapper": undefined,
        },
        "params": [],
      },
      "method": "PUT",
      "methodName": "setConfig",
      "originalName": "Set Config",
      "path": "/projects/\${projectName}/config",
      "returnType": {
        "type": "ConfigInfo",
        "wrapper": undefined,
      },
    },
    {
      "description": "
Run the Git garbage collection for the repository of a project.

Options for the Git garbage collection can be specified in the
request body as a GCInput entity.

The response is the streamed output of the garbage collection.
",
      "inputs": {
        "args": [
          "projectName",
        ],
        "body": {
          "type": "GCInput",
          "wrapper": undefined,
        },
        "params": [],
      },
      "method": "POST",
      "methodName": "runGC",
      "originalName": "Run GC",
      "path": "/projects/\${projectName}/gc",
      "returnType": {
        "type": "any",
      },
    },
    {
      "description": "
Marks commits as banned for the project. If a commit is banned Gerrit
rejects every push that includes this commit with
contains banned commit …​.

The commits to be banned must be specified in the request body as a
BanInput entity.

The caller must be project owner.

As response a BanResultInfo entity is returned.
",
      "inputs": {
        "args": [
          "projectName",
        ],
        "body": {
          "type": "BanInput",
          "wrapper": undefined,
        },
        "params": [],
      },
      "method": "PUT",
      "methodName": "banCommit",
      "originalName": "Ban Commit",
      "path": "/projects/\${projectName}/ban",
      "returnType": {
        "type": "BanResultInfo",
        "wrapper": undefined,
      },
    },
    {
      "description": "
Lists the access rights for a single project.

As result a
ProjectAccessInfo
entity is returned.
",
      "inputs": {
        "args": [
          "projectName",
        ],
        "body": undefined,
        "params": [],
      },
      "method": "GET",
      "methodName": "listAccessRightsforProject",
      "originalName": "List Access Rights for Project",
      "path": "/projects/\${projectName}/access",
      "returnType": {
        "type": "ProjectAccessInfo",
        "wrapper": undefined,
      },
    },
    {
      "description": "
Sets access rights for the project using the diff schema provided by
ProjectAccessInput. Deductions are used to
remove access sections, permissions or permission rules. The backend will remove
the entity with the finest granularity in the request, meaning that if an
access section without permissions is posted, the access section will be
removed; if an access section with a permission but no permission rules is
posted, the permission will be removed; if an access section with a permission
and a permission rule is posted, the permission rule will be removed.

Additionally, access sections and permissions will be cleaned up after applying
the deductions by removing items that have no child elements.

After removals have been applied, additions will be applied.

As result a
ProjectAccessInfo
entity is returned.
",
      "inputs": {
        "args": [
          "projectName",
        ],
        "body": undefined,
        "params": [],
      },
      "method": "POST",
      "methodName": "addUpdateandDeleteAccessRightsforProject",
      "originalName": "Add, Update and Delete Access Rights for Project",
      "path": "/projects/\${projectName}/access",
      "returnType": {
        "type": "ProjectAccessInfo",
        "wrapper": undefined,
      },
    },
    {
      "description": "
This command runs access checks for other users. This requires the
View Access global
capability.

The result is a AccessCheckInfo entity
detailing the access of the given user for the given project,
project-ref, or project-permission-ref combination.
",
      "inputs": {
        "args": [],
        "body": undefined,
        "params": [
          [
            "account",
            "account",
          ],
          [
            "permission",
            "perm",
          ],
          [
            "ref",
            "ref",
          ],
        ],
      },
      "method": "GET",
      "methodName": "checkAccess",
      "originalName": "Check Access",
      "path": "/projects/MyProject/check.access",
      "returnType": {
        "type": "AccessCheckInfo",
        "wrapper": undefined,
      },
    },
  ],
  "titleSection": "projectEndpoints",
}
`;
